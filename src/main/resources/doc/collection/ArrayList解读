ArrayList解读

1.
(1).使用数组实现的列表,因为该列表是使用了数组实现,所以支持随机读取的功能(Random access),
对于随机读取具有o(1)的效率（相较于链表的方式,获取查询可能需要遍历）,但是插入操作性能比较差,每当
数组的容量不够的时候或者是插入指定索引列的时候会重新的分配数组以及将原来的数组进行拷贝到新数组中.
所以对于随机插入比较多的适合用链表的方式,而随机读取的适合使用数组形式的
(2).针对上面的理解,如果必须使用ArrayList的时候,为了减少数组的扩容导致的数组拷贝,建议指定数组的大小
或者使用public void ensureCapacity(int minCapacity)一次性的扩容到预想的大小

2.主要的方法
所有的方法继承于Collection以及List
(1).增
add* 方法 都会校验数组的大小,如果容量不够的话,将会增加至原来的1.5倍.
对于指定位置的插入,需要重新拷贝一次数组.比如：add(int,E)
public void add(int index, E element) {
    rangeCheckForAdd(index);

    //这里会对数组大小进行校验
    ensureCapacityInternal(size + 1);  // Increments modCount!!
    //这里一定会发生数组的拷贝
    System.arraycopy(elementData, index, elementData, index + 1,
                     size - index);
    elementData[index] = element;
    size++;
}
(2).删
remove* 和add类似,也会有数组的拷贝操作.删除的时候将数组的元素移到一边,将超出
范围的设置为null. remove操作需要遍历数组

(3).改
public void ensureCapacity(int minCapacity)将数组的大小设置至少为minCapacity,这个方法
可以给数组设置一个合理的大小
public List<E> subList(int fromIndex, int toIndex)返回一个子列表,这个列表的元素是映射到原有
的的列表
public void trimToSize() 将数据不需要的元素(null)给丢弃,将数组的内容缩小到size大小(因为有可能删除的时候将
比size大的元素都设置为null)
public void sort(Comparator<? super E> c) 将列表的元素进行排序

(4).查
根据索引查询性能比较高,但是如果是根据对象查询的话,可能就需要遍历