AbstractQueuedSynchronizer 解读

目录
1.概述
2.数据结构
3.AQS的实现方式
3.1 AQS中通用的方法
3.2 独占模式实现的方法
3.3 共享锁的实现
4 内部类
4.1 Node节点
4.2 ConditionObject节点（待填坑）
5.AQS内部的其他方式

CLK自旋锁：https://www.cnblogs.com/llkmst/p/4895478.html

1.鼎鼎大名的AQS,基本上所有的显示锁都是基于它实现的,从这也能猜出实现必定不简单.
Queued: 队列的
Synchronizer: 同步器
对于显示锁满足happen-before原则,所以线程安全的.

2.数据结构
AQS中维护了一个CLK自旋锁(变种,但是其中的大部分思想是一致的).表现形式就是一个队列,队列的实现方式是双向链表
其中的首节点第一次初始化为没有意义的Node对象（懒加载的方式初始化CLK）.之后按照队列的FIFO原则加入元素,也就是CLK提供先来先服务的公平性.
对于最后一个加入的元素为尾节点.其中的每个节点的数据结构请见后面分析.

private transient volatile Node head: CLK的首节点,因为根据CLK的定义,必须要有一个首部必须要
有一个元素,所以在第一次有元素进来的时候,会初始化一个没有意义的节点(CLK中的dummy节点).而第一次插入的节点将是head节点的后续节点,
在插入之后,在满足唤醒条件的话就会按照FIFO的顺序唤醒head后面的线程

private transient volatile Node tail：末尾节点,新增节点都是添加在最后,为了防止并发问题,是通过
CAS的方式进行tail的设置的.

private volatile int state：维护了一个状态,以及提供了这个状态的CAS设置方法,在不同的同步器中使用方法
是不同的,所以可以这么说, 这个属性只是提供了原子操作,而具体怎么使用则没有定义,非常的灵活.


3.AQS的实现方式
通用的几个方法:
(1).新元素入CLK列队
@param mode: SHARED 共享的模式 EXCLUSIVE：独占的模式
private Node addWaiter(Node mode) {
    //因为在条件满足的情况下,前置节点需要唤醒后继节点 所以储存线程对象
    //当当前节点能够被唤醒的时候 前置节点通过LockSupport.unpark对当前节点进行唤醒
    Node node = new Node(Thread.currentThread(), mode);
    //如果已经初始化过了 那么就采用简单的方式将新加入的节点作为CLK的尾节点
    Node pred = tail;
    if (pred != null) {
        node.prev = pred;
        //采用CAS的方式将新插入的节点设置为尾节点  如果发送了并发的情况
        //那么只能采用enq重试的方式加入到CLK队列
        if (compareAndSetTail(pred, node)) {
            pred.next = node;
            return node;
        }
    }
    enq(node);
    return node;
}
重试直到元素加入到队列中
private Node enq(final Node node) {
        for (;;) {
            Node t = tail;
            //如果CLK队列是空的话,那么初始化一个dummy首节点 该节点是没有任何的意义的
            if (t == null) { // Must initialize
                if (compareAndSetHead(new Node()))
                    tail = head;
            } else {
                node.prev = t;
                //如果CAS设置失败 一直重试 直到成功
                if (compareAndSetTail(t, node)) {
                    t.next = node;
                    return t;
                }
            }
        }
    }
(2).唤醒后继节点
private void unparkSuccessor(Node node) {

    //如果是负的话(当前节点为SIGNAL),那么需要对后继节点进行唤醒,将当前节点设置为0 表示
    //已经唤醒过了后继节点了
    int ws = node.waitStatus;
    if (ws < 0)
        compareAndSetWaitStatus(node, ws, 0);
    //如果后继节点为空或者被取消了,只要CANCELLED > 0 (在节点被加入到CLK中之后,但是在等待被唤醒的时候
    //出现异常才后被取消)
    Node s = node.next;

    //如果node节点的后续节点为null 或者被取消了 那么采用不同的一条路径去唤醒后继节点-从tail节点往遍历
    //直到找到一个能够唤醒的节点
    if (s == null || s.waitStatus > 0) {
        s = null;
        //从最后一个节点开始往前遍历 直到找到能够唤醒的节点
        for (Node t = tail; t != null && t != node; t = t.prev)
            if (t.waitStatus <= 0)
                s = t;
    }
    if (s != null)
        //使用LockSupport进行唤醒
        LockSupport.unpark(s.thread);
}
(3).将加入到CLK队列中的元素进行取消
private void cancelAcquire(Node node) {
    // Ignore if node doesn't exist
    if (node == null)
        return;

    node.thread = null;

    //获取前置节点,对于被取消的节点全部跳过.这里拿到前置节点来就是为了将前置节点的
    //后置节点设置为当前需要取消的节点的后置非取消节点-即删除链表的一部分数据
    Node pred = node.prev;
    while (pred.waitStatus > 0)
        node.prev = pred = pred.prev;

    //这里拿到next节点是为了CAS使用,为了将pre的后置节点设置为node的后置节点
    Node predNext = pred.next;

    //将节点设置为取消状态
    node.waitStatus = Node.CANCELLED;


    //如果取消的节点是尾部节点,那么将尾节点设置为尾节点的前置节点 如果这个时候出现并发的情况(新设置了新的尾节点)
    //那么将会出现失败 else中将会处理这种情况
    if (node == tail && compareAndSetTail(node, pred)) {
        //因为取消节点为尾节点 在第一步已经将取消节点的前置节点设置为了尾节点
        //这一步就是将新的尾节点的后置节点设置为null 成功与否不会造成影响
        compareAndSetNext(pred, predNext, null);
    } else {
       //如果是在判断前(node == tail) 就插入到了CLK队列中,那么就将
       //CLK链表跳过取消的节点,或者直接唤醒取消节点的后继节点
        int ws;
        if (pred != head &&
            ((ws = pred.waitStatus) == Node.SIGNAL ||
             (ws <= 0 && compareAndSetWaitStatus(pred, ws, Node.SIGNAL))) &&
            pred.thread != null) {
            Node next = node.next;
            if (next != null && next.waitStatus <= 0)
                compareAndSetNext(pred, predNext, next);
        } else {
            unparkSuccessor(node);
        }

        node.next = node; // help GC
    }
}
(4).中断当前节点的线程
private final boolean parkAndCheckInterrupt() {
    //将当前的线程进行睡眠
    LockSupport.park(this);
    //线程可能是 unpark 或者被中断了(Thread.interrupted()将会返回中断状态并且清除线程的中断状态
    //所以如果需要保存线程的中断状态,需要重新设置 通过 interrupt()设置)
    return Thread.interrupted();
}
(5).判断是否应该中断线程
private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) {
    int ws = pred.waitStatus;
    if (ws == Node.SIGNAL)
        //如果节点为SIGNAL,那么可以直接睡眠,因为待节点睡眠被唤醒之后作为了head节点
        //能够通过SIGNAL说明可以直接唤醒后继节点
        return true;
    if (ws > 0) {
    //跳过取消的节点（只有取消的节点才会大于0）
        do {
            node.prev = pred = pred.prev;
        } while (pred.waitStatus > 0);
        pred.next = node;
    } else {
        //否则的话 采用CAS的方式进行设置状态 如果并发设置失败的话 那么下一个轮次进行设置
        //的话 就直接满足ws == Node.SIGNAL了
        compareAndSetWaitStatus(pred, ws, Node.SIGNAL);
    }
    return false;
}

独占模式实现的方法：
(1).protected boolean tryAcquire(int arg)
子类需要实现的方法,表示的是线程能否获取到资源. 如果返回false,则表示不能被获取到,那么
线程就被加入到队列并且等待被唤醒.arg表示的acquire传入的参数.
(2).protected boolean tryRelease(int arg)
子类需要实现的方法,表示线程释放资源,如果返回true则表示将acquire中加入到队列中的线程
给唤醒或者当前的线程能够获得资源
(3).获取锁
public final void acquire(int arg) {
    //这就是(2)中锁提到的 如果tryAcquire返回了true,那么表明当前的线程能够获得的锁

   //在tryAcquire中可以实现两种方式的锁
   //公平的独占锁 在实现的时候 首先判断是否能够获得资源(通过state能够知道),同时判断CLK中
   //是否已经有任务在其中了,如果有的话 那么返回false,就会知道半部分逻辑

   //非公平的独占锁 在实现的时候 首先判断是否能够获得资源(通过state能够知道),不需要对CLK中的队列
   //进行判断 这样的话 就不是FIFO执行加入的线程了

    //see ReentrantLock 公平锁和非公平锁的实现
    if (!tryAcquire(arg) &&
        acquireQueued(addWaiter(Node.EXCLUSIVE), arg))
        //将线程的中断状态设置为true
        selfInterrupt();
}
返回true的话 表示的是被中断了
此方法非常的重要 主要做的是检查传入的node的前置节点是否已经变为了head节点
如果已经变成了head节点 那么将传入的节点设置为head节点
final boolean acquireQueued(final Node node, int arg) {
    boolean failed = true;
    try {
        boolean interrupted = false;
        for (;;) {
            final Node p = node.predecessor();
            //如果前置节点是首节点,那么重新获取资源看是否能获取到资源(如果此时是非公平锁,还是有可能获取失败)
            //如果获的锁 那么当前节点设置为了head节点 并且获得了锁资源
            if (p == head && tryAcquire(arg)) {
                //因为head都是持有锁的节点
                setHead(node);
                p.next = null; // help GC
                failed = false;
                return interrupted;
            }
            //将节点设置为SIGNAL 并且通过 LockSupport将线程进行中断
            //之后node的前置节点在release的时候将会unparkSuccessor node节点
            if (shouldParkAfterFailedAcquire(p, node) &&
                parkAndCheckInterrupt())
                //因为acquire是不能被中断的版本,对于
                //能被中断的版本： throw new InterruptedException();
                interrupted = true;
        }
    } finally {
        if (failed)
            cancelAcquire(node);
    }
}
(4).对于独占的方法还有时间限制的版本,比如： tryAcquireNanos(int arg, long nanosTimeout) 这个版本唯一的
不同点就在于在中断循环处设置了等待的时间，如下分析：
private boolean doAcquireNanos(int arg, long nanosTimeout)
            throws InterruptedException {
        if (nanosTimeout <= 0L)
            return false;
        final long deadline = System.nanoTime() + nanosTimeout;
        final Node node = addWaiter(Node.EXCLUSIVE);
        boolean failed = true;
        try {
            for (;;) {
                final Node p = node.predecessor();
                if (p == head && tryAcquire(arg)) {
                    setHead(node);
                    p.next = null; // help GC
                    failed = false;
                    return true;
                }
                //除了这部分时间的判断 其他的实现都是一样的
                nanosTimeout = deadline - System.nanoTime();
                if (nanosTimeout <= 0L)
                    return false;

                    //nanosTimeout > spinForTimeoutThreshold 这部分是在短时间内先通过自旋的
                    //方式 超过一定的时间再通过是线程让出CPU的方式实现 这部分是一个优化
                if (shouldParkAfterFailedAcquire(p, node) &&
                    nanosTimeout > spinForTimeoutThreshold)
                    LockSupport.parkNanos(this, nanosTimeout);
                if (Thread.interrupted())
                    throw new InterruptedException();
            }
        } finally {
            if (failed)
                cancelAcquire(node);
        }
}

(5)释放锁
子类实现 如果返回true的话 表示释放锁成功 一般都是操作states
protected boolean tryRelease(int arg) {
    throw new UnsupportedOperationException();
}
释放锁
public final boolean release(int arg) {
    //即使上面讲解的那样 如果返回了true 那么释放锁成功了
    //如果能够释放的话 那么拿到head节点之后检查状态,如果非0的话(0表示唤醒过后继节点了),唤醒后继节点
    if (tryRelease(arg)) {
        Node h = head;
        if (h != null && h.waitStatus != 0)
            //唤醒后继节点
            unparkSuccessor(h);
        return true;
    }
    return false;
}



共享锁的实现
(1).protected int tryAcquireShared(int arg) 子类需要实现的
当返回大于等于0的时候 表示存在资源 那么能够获取到资源,如果小于0则表示不能够获取到资源,那么线程将会被加入到
CLK队列中,当其他线程释放资源的时候,就会按照head的后续节点一直往后传播让它们重新尝试是否能够获得到锁
(2).protected boolean tryReleaseShared(int arg) 子类需要实现的
当返回true的时候(这个时候一般都会操作state 控制其状态,使其他堵塞的节点能够获取到资源)就按照head的后继节点的
按照FIFO的规则往后测试是否能够获取到资源,如果能够获取到资源那么一直往后遍历,直到不能够获取到资源为止.
(3).获取锁
//@param arg 传入的参数
public final void acquireShared(int arg) {
    //如果小于0不能获取到资源,那么进入到队列中并且等待被唤醒,如果返回大于0 那么直接就返回了
    if (tryAcquireShared(arg) < 0)
        doAcquireShared(arg);
}
private void doAcquireShared(int arg) {
    //将共享模式的节点加入到CLK队列中
    final Node node = addWaiter(Node.SHARED);
    boolean failed = true;
    try {
        boolean interrupted = false;
        for (;;) {
            //这部分实现还是和独占锁相同的,就是按照FIFO的规则检查后继节点是否满足
            //被唤醒的条件
            final Node p = node.predecessor();
            if (p == head) {
                //如果前置节点是head节点的话,那么尝试获取资源,因为
                //执行是按照从head开始往后执行的, 有可能前置节点已经执行完了,这里直接自己检查的话就不需要
                //head节点 unpark自己的线程
                int r = tryAcquireShared(arg);
                if (r >= 0) {
                    //如果确实能够获得资源的话,那么这里将会把自己设置为head节点,并且
                    //因为是共享锁,所以需要按照FIFO的规则向后传播这种消息(再次确认是否能够获得共享锁).
                    setHeadAndPropagate(node, r);
                    p.next = null; // help GC
                    if (interrupted)
                        selfInterrupt();
                    failed = false;
                    return;
                }
            }
            if (shouldParkAfterFailedAcquire(p, node) &&
                parkAndCheckInterrupt())
                interrupted = true;
        }
    } finally {
        if (failed)
            cancelAcquire(node);
    }
}
private void setHeadAndPropagate(Node node, int propagate) {
    Node h = head; // Record old head for check below
    //将当前获取到资源的节点设置为head节点
    setHead(node);
     //如果传入了propagate大于0 表示资源可用了,那么唤醒之后的节点,但是并不是说
     //唤醒之后就能够获取到锁了,还得经过tryAcquireShared的校验,具体参考doAcquireShared(..)
     //h==null 则表示的是当前的node是队列中的唯一的一个,而目前又是共享的模式,所以完全可以向后
     //传播 让后面的节点判断是否能够被唤醒了.
     // h.waitStatus < 0  同理,表示head是SIGNAL,当前node已经被
     //唤醒了,后继节点也需要校验（共享模式可能多个节点满足了唤醒条件了）
     //(h = head) == null || h.waitStatus < 0) 条件也是差不多的,后继节点满足条件
     //需要去校验是否能够被唤醒
    if (propagate > 0 || h == null || h.waitStatus < 0 ||
        (h = head) == null || h.waitStatus < 0) {
        Node s = node.next;
        if (s == null || s.isShared())
            doReleaseShared();
    }
}
(4).释放锁
public final boolean releaseShared(int arg) {
    //子类决定现在是否能够释放锁
    if (tryReleaseShared(arg)) {
        doReleaseShared();
        return true;
    }
    return false;
}
//这个方法需要结合doAcquireShared和其中的setHeadAndPropagate方法一起看,如果在该方法中head节点的后继节点被唤醒之后,在doAcquireShared
//中再次通过tryReleaseShared判断后继节点是否能够获取到资源,如果能够的话后续节点被设置为head节点,并且调用setHeadAndPropagate,
//其中又重新会调用doReleaseShared方法,这样就能够在共享模式下面 唤醒CLK多个节点了(只要后继节点在调用tryReleaseShared返回true就OK)
private void doReleaseShared() {
    //唤醒head的后续节点
    for (;;) {
        Node h = head;
        if (h != null && h != tail) {
            int ws = h.waitStatus;
            //如果节点为SIGNAL那么唤醒后继节点,并且将其设置为0 初始化状态(没有特殊含义)
            if (ws == Node.SIGNAL) {
                //采用CAS的方式如果成功的话 那么唤醒
                if (!compareAndSetWaitStatus(h, Node.SIGNAL, 0))
                    continue;            // loop to recheck cases
                unparkSuccessor(h);
            }
            //如果为0的话,那么说明后继节点已经被唤醒过了,可以设置为PROPAGATE
            //表明传播过了,后面校验head节点是否有变化.还有一种情况: 被并发设置为了PROPAGATE(CAS失败,那么需要进行下一轮的校验
            //下一轮里如果head节点两种情况：head节点变化了,那么重新执行上面同样逻辑;head没有变那么就会到 h == head,直接退出循环))
            else if (ws == 0 &&
                     !compareAndSetWaitStatus(h, 0, Node.PROPAGATE))
                continue;                // loop on failed CAS
        }
        if (h == head)                   // loop if head changed
            break;
    }
}


4.内部类：

(1).Node
CLK 的节点,数据结构
volatile int waitStatus:
节点所以的状态
SIGNAL : 这个状态的节点说明它的后续节点需要被唤醒,一般出现的情况就是执行release*方法之后,将会
唤醒后继节点. 并不是说节点处于SIGNAL就会唤醒后继节点,还要在节点为head节点并且当前的waitStatus状态为SIGNAL
才会唤醒后续节点
CANCELLED: 说明这个节点已经取消了,在唤醒的时候需要跳过这类节点
CONDITION：节点处于condition状态（Condition 后续介绍)使用
PROPAGATE: 这个状态在共享模式下使用,说明已经唤醒过后继节点了(并发被其他的执行唤醒)

volatile Node prev 前节点
volatile Node next 后继节点
volatile Thread thread 保存属于入队列的线程
Node nextWaiter 在condition状态下使用


(2).ConditionObject
使用场景只能是独占模式下面,也就是protected boolean isHeldExclusively()返回true的情况.
Condition实现了类似对象的wait和notify方法
使用过程：
首先获得独占锁关联的condition,然后获得锁之后,进行等待(await).
在之后的时机成熟之后获得锁之后,进行唤醒（signal或者signalAll方法）
代码分析：
(1).加入到等待的队列中
public final void await() throws InterruptedException {
       //这是可中断的功能
        if (Thread.interrupted())
            throw new InterruptedException();
        //将condition节点加入到队列中(非CLK 而是condition维护的一个链表
        //这个链表在之后调用signal的时候将会同步到CLK队列中)
        Node node = addConditionWaiter();
        //这里会将独占锁资源给释放掉 其他的独占锁就能够获得资源了(否则其他的线程就不能获得锁了,也就不能调用
        //signal了)
        int savedState = fullyRelease(node);
        int interruptMode = 0;
        //如果当前线程的节点不在同步队列中(CLK队列中)
        while (!isOnSyncQueue(node)) {
            //将其红堵塞 直到被唤醒或者被中断
            LockSupport.park(this);
            //注意这里 如果非中断的话 那么从重新做while的逻辑 如果这个时候已经
            //将其放入到了CLK队列中了
            if ((interruptMode = checkInterruptWhileWaiting(node)) != 0)
                break;
        }
        //当前线程节点已经被加入到同步队列CLK中了(signal方法被调用的时候会把链表的元素都加入
        //进去 见后面signal分析),因为有可能会有很多的线程在await 所以即使被唤醒还是需要进行争夺资源,见：acquireQueued分析
        //acquireQueued只有在中断返回的时候才返回true 这样需要中断状态校验
        if (acquireQueued(node, savedState) && interruptMode != THROW_IE)
            interruptMode = REINTERRUPT;
        //清理被取消节点
        if (node.nextWaiter != null) // clean up if cancelled
            unlinkCancelledWaiters();
        //处理中断的情况
        if (interruptMode != 0)
            reportInterruptAfterWait(interruptMode);

        //在后面的逻辑中是lock.release 所以就唤醒当前node的下一个线程节点(针对于signalAll就是唤醒下一个链表转移到CLK队列中的元素,一直唤醒所有的节点)
}
(2).唤醒其中的一个线程
public final void signal() {
    //必须是独占模式下使用
    if (!isHeldExclusively())
        throw new IllegalMonitorStateException();
    //拿到await在上面的原有节点 是通过链表的方式进行保存的
    Node first = firstWaiter;
    if (first != null)
        //这一部分是将链表的所有元素都加入到CLK中 并且加入之后将前置节点设置为
        //(节点属性有解释,当节点为head节点之后并且属性为SIGNAL的时候,可以唤醒后置节点),在这一步虽然将所有的节点都加入到CLK中之后,这些节点并不能获得
        //任务的资源,只有在lock的release之后,然后await方法中 "if (acquireQueued(node, savedState) && interruptMode != THROW_IE)"的"acquireQueued(node, savedState)"
        //开始检测是否能够获得锁
        doSignal(first);
}
执行逻辑
private void doSignal(Node first) {
    do {
        if ( (firstWaiter = first.nextWaiter) == null)
            lastWaiter = null;
        first.nextWaiter = null;
        //如果转移失败的话 那么转移后面的节点 一直到成功为止
        //看这个就可以直到condition是公平的 就是先await的先被唤醒
    } while (!transferForSignal(first) &&
             (first = firstWaiter) != null);
}
主逻辑
final boolean transferForSignal(Node node) {
    //如果这里不能将状态设置为0 那么转移失败(可能是当前的节点被取消了 返回false,继续往后面查看节点)
    if (!compareAndSetWaitStatus(node, Node.CONDITION, 0))
        return false;

    //加入到CLK队列中 如果前置节点为head节点的时候 该node节点就能够被唤醒了
    Node p = enq(node);
    int ws = p.waitStatus;
    //如果前置节点已经被取消了 或者设置为SIGNAL失败 那么直接将该节点唤醒
    if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL))
        LockSupport.unpark(node.thread);
    //返回true的意思就是不需要继续往后面查询是否有其他节点了
    return true;
}
唤醒全部的节点
这部分同上
public final void signalAll() {
    if (!isHeldExclusively())
        throw new IllegalMonitorStateException();
    Node first = firstWaiter;
    if (first != null)
        doSignalAll(first);
}

private void doSignalAll(Node first) {
    lastWaiter = firstWaiter = null;
    do {
        Node next = first.nextWaiter;
        first.nextWaiter = null;
        //这里将所有的节点都加入到CLK队列中,当release的时候,全部被唤醒
        transferForSignal(first);
        first = next;
    } while (first != null);
}

5.AQS内部的方法
protected final Thread getExclusiveOwnerThread()
当是独占的模式的时候 返回独占锁所属的线程,如果没有返回null

public final Collection<Thread> getExclusiveQueuedThreads()
返回独占模式下 等待的线程

public final Thread getFirstQueuedThread()
获取在CLK队列中等待最久的元素,一般都是head的next元素

public final Collection<Thread> getQueuedThreads()
返回CLK中的所有线程

public final int getQueueLength()
返回CLK队列的长度

public final Collection<Thread> getSharedQueuedThreads()
返回共享锁下的等待线程

public final Collection<Thread> getWaitingThreads(ConditionObject condition)
返回await Condition下的线程

public final int getWaitQueueLength(ConditionObject condition)
返回await Condition下的线程节点的长度

public final boolean hasContended()
是否发生了竞争

public final boolean hasQueuedPredecessors()
判断队列中是存在除了调用线程之外其他的线程节点

public final boolean hasQueuedThreads()
队列中是否有节点

public final boolean hasWaiters(ConditionObject condition)
是否有线程await在Condition上面

public final boolean isQueued(Thread thread)
指定线程是否在队列中

public final boolean owns(ConditionObject condition)
调用该ConditionObject是由当前的Lock锁创建的










扩展:

1.显示锁和内置锁(synchronized)的区别:
内置锁是基于JVM指令monitorenter和monitorexist实现,属于隐示锁,满足内存模型(暂存区的数据作废,更新的数据同步到主内存中.
而显示锁的实现方式则是通过AQS和CAS,AQS中大量使用了CAS操作以及volatile 实现的

2.volatile 关键字
在JMM中,分为工作内存和主内存(表现在实现上就是堆和栈的区别),如果在多线程的环境下, 可能出现
线程安全的问题. 但是使用volatile 满足happen-before: 对一个volatile域的写操作，happens-before于任意线程后续对这个volatile域的读

3.happen-before 规则：
    1.程序次序原则：对于同一个线程,对于每一个操作,早与任意的后续操作
    2.管程锁定原则：对一个临界区的lock操作早于后面对临界区lock操作
    2.线程启动原则：线程启动早于这个线程中的其他任何操作
    3.线程终止原则：所有对线程检测到终止的方法都晚于线程的其他操作
    5.volatile原则：对一个volatile域的写操作，happens-before于任意线程后续对这个volatile域的读,
    对于volatile还要一个很重要的东西：volatile写入变量之后,所以写之前的本地内存的变量都被设置为不可用：
    https://www.zhihu.com/question/41016480?sort=created
    6.线程中断规则：对线程interrupt（）方法的调用happen—before发生于被中断线程的代码检测到中断时事件的发生。
    7.对象终结规则：一个对象的初始化完成（构造函数执行结束）happen—before它的finalize（）方法的开始。
    6.传递原则： A happen-before B , B happen-before C ,那么A happen-before C




