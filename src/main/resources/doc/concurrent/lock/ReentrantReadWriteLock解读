ReentrantReadWriteLock解读

1.概述
2.属性
3.实现原理
4.方法


1.实现了ReadWriteLock接口,可重入的读写锁.满足读写锁的定义,和ReentrantLock类似,也是也有公平锁和非公平锁的区分

实现原理:
实现了AQS,实现了独占锁和共享锁的两个机制(tryAcquire与tryAcquireShared),那么实现接口定义的规则(在没有写锁的情况下
可以有多个读锁同时被获取但是写锁不能被获取,当有写锁的情况下是独占的形式)呢?
答:
实现层面是通过在states的高16为储存读锁的数量,低16为储存的是写锁的数量,所以在获取锁的时候就可以通过低16位的校验+高16为的
校验

2.属性
private final ReentrantReadWriteLock.ReadLock readerLock
读锁
private final ReentrantReadWriteLock.WriteLock writerLock
写锁
final Sync sync
实现具体的逻辑-包括读写锁的逻辑

3.实现原理
Sync抽象类
abstract static class Sync extends AbstractQueuedSynchronizer {
        private static final long serialVersionUID = 6317671515068378041L;

        //这里将states分为了两个无符号short 低16为写锁的重入次数 高16位为读锁被获取的次数
        //这里有一个问题可能会比较有疑问-那就是对于高16位的读锁重入次数是怎么记录呢? 在此类是通过
        //HoldCounter进行记录,而HoldCounter是存储与ThreadLocal中
        static final int SHARED_SHIFT   = 16;
        //左移单位
        static final int SHARED_UNIT    = (1 << SHARED_SHIFT);
        static final int MAX_COUNT      = (1 << SHARED_SHIFT) - 1;
        //掩码
        static final int EXCLUSIVE_MASK = (1 << SHARED_SHIFT) - 1;

        //返回高16位
        static int sharedCount(int c)    { return c >>> SHARED_SHIFT; }
        //返回低16位
        static int exclusiveCount(int c) { return c & EXCLUSIVE_MASK; }

        //记录的是每一个线程重入锁的次数 通过ThreadLocal保存,通过cachedHoldCounter进行缓存
        static final class HoldCounter {
            int count = 0;
            //这里保存线程的ID,这里不保存线程实例 是为了防止垃圾泄露
            final long tid = getThreadId(Thread.currentThread());
        }

        //保存了线程的HoldCounter
        static final class ThreadLocalHoldCounter
            extends ThreadLocal<HoldCounter> {
            public HoldCounter initialValue() {
                return new HoldCounter();
            }
        }

        /**
         * The number of reentrant read locks held by current thread.
         * Initialized only in constructor and readObject.
         * Removed whenever a thread's read hold count drops to 0.
         */
        //见前面说的 states高16储存的是读锁的数量,那么重入的次数怎么记录呢？就是通过
        //这里进行记录的.当当前的线程读锁持有数量为0 那么将其移除
        private transient ThreadLocalHoldCounter readHolds;

        //是最后一个读线程的持有数目的缓存,主要就是为了更好的性能,因为对于同一个线程的
        //release以及acquire就可以直接对它进行操作了,而不需要操作ThreadLocal
        private transient HoldCounter cachedHoldCounter;

        //第一个持有读锁的线程 并且读锁还没有被释放的线程
        private transient Thread firstReader = null;
        //第一个持有读锁的线程的持有次数
        private transient int firstReaderHoldCount;

        Sync() {
            //进行初始化
            readHolds = new ThreadLocalHoldCounter();
            //这里是为了readHolds的可见性,因为readHolds没有被volatile修饰的(AQS满足happen-before)
            setState(getState()); // ensures visibility of readHolds
        }

        //对于Acquires和releases，公平和非公平锁都是使用的相同的代码,但是对于
        //当CLK队列不为空的情况 是否竞争锁资源是由子类确定的

        //如果当前线程试图去获取读锁的时候,如果策略要求堵塞的话 那么进行堵塞 否则的话 获取到读锁的资源
        abstract boolean readerShouldBlock();
        //同上
        abstract boolean writerShouldBlock();

        /*
         * Note that tryRelease and tryAcquire can be called by
         * Conditions. So it is possible that their arguments contain
         * both read and write holds that are all released during a
         * condition wait and re-established in tryAcquire.
         */

        //独占锁释放逻辑
        protected final boolean tryRelease(int releases) {
            //只有在当前锁被当前线程锁定的时候 才能够调用释放方法
            if (!isHeldExclusively())
                throw new IllegalMonitorStateException();
            int nextc = getState() - releases;
            //判断独占锁是否已经释放完了(0表示没有被占用了)
            boolean free = exclusiveCount(nextc) == 0;
            if (free)
                setExclusiveOwnerThread(null);
            setState(nextc);
            return free;
        }

        //独占锁获取逻辑
        protected final boolean tryAcquire(int acquires) {

            Thread current = Thread.currentThread();
            //总的状态
            int c = getState();
            //写锁获取次数
            int w = exclusiveCount(c);
            if (c != 0) {
                // (Note: if c != 0 and w == 0 then shared count != 0)
                //如果当前有读锁 或者是当前持有写锁不是不是当前线程 那么获取独占锁失败
                if (w == 0 || current != getExclusiveOwnerThread())
                    return false;
                //如果独占锁是当前的 但是超过了持有的次数(重入) 那么抛出移除
                if (w + exclusiveCount(acquires) > MAX_COUNT)
                    throw new Error("Maximum lock count exceeded");
                // Reentrant acquire
                //设置重入的次数
                setState(c + acquires);
                return true;
            }

            //如果是0的话 那么既没有读锁 又没有写锁
            //如果应该堵塞写锁的话 那么直接返回获取锁失败,或者是不堵塞写锁 但是CAS设置states失败的话 那么同样也返回
            //获取失败(被其他线程同步获取锁了)
            if (writerShouldBlock() ||
                !compareAndSetState(c, c + acquires))
                return false;
            //获取到独占锁 设置当前的线程为独占
            setExclusiveOwnerThread(current);
            return true;
        }

        protected final boolean tryReleaseShared(int unused) {
            Thread current = Thread.currentThread();
            if (firstReader == current) {
                // assert firstReaderHoldCount > 0;
                if (firstReaderHoldCount == 1)
                    firstReader = null;
                else
                    firstReaderHoldCount--;
            } else {
                HoldCounter rh = cachedHoldCounter;
                if (rh == null || rh.tid != getThreadId(current))
                    rh = readHolds.get();
                int count = rh.count;
                if (count <= 1) {
                    readHolds.remove();
                    if (count <= 0)
                        throw unmatchedUnlockException();
                }
                --rh.count;
            }
            for (;;) {
                int c = getState();
                int nextc = c - SHARED_UNIT;
                if (compareAndSetState(c, nextc))
                    // Releasing the read lock has no effect on readers,
                    // but it may allow waiting writers to proceed if
                    // both read and write locks are now free.
                    return nextc == 0;
            }
        }

        private IllegalMonitorStateException unmatchedUnlockException() {
            return new IllegalMonitorStateException(
                "attempt to unlock read lock, not locked by current thread");
        }

        //共享模式下获取锁的过程
        protected final int tryAcquireShared(int unused) {
            Thread current = Thread.currentThread();
            int c = getState();
            //如果独占锁被其他的占用 那么返回-1表示获取锁失败
            if (exclusiveCount(c) != 0 &&
                getExclusiveOwnerThread() != current)
                return -1;
            //获取读锁的数量
            int r = sharedCount(c);
            //如果读锁不需要堵塞 并且获取读锁成功的话
            if (!readerShouldBlock() &&
                r < MAX_COUNT &&
                compareAndSetState(c, c + SHARED_UNIT)) {
                //是第一个获取锁的线程 那么进行记录
                if (r == 0) {
                    //进行记录为第一个线程
                    firstReader = current;
                    firstReaderHoldCount = 1;
                //其他的情况 如果当前是第一个线程 并且不是第一次后期 那么只需要增加获取次数就OK了
                } else if (firstReader == current) {
                    firstReaderHoldCount++;
                } else {
                    //否则的话 那么就需要进行初始化了
                    HoldCounter rh = cachedHoldCounter;
                    //如果存在的话 那么进行一个初始化操作
                    if (rh == null || rh.tid != getThreadId(current))
                        cachedHoldCounter = rh = readHolds.get();
                    else if (rh.count == 0)
                        readHolds.set(rh);
                    //增加读锁的持有次数
                    rh.count++;
                }
                return 1;
            }
            return fullTryAcquireShared(current);
        }

        //在我们CAS方式下 我们尝试自旋去获取读锁 直到获取到或者获取失败
        final int fullTryAcquireShared(Thread current) {
            HoldCounter rh = null;
            for (;;) {
                int c = getState();
                if (exclusiveCount(c) != 0) {
                    //如果被其他线程只有独占锁 那么返回获取共享锁失败
                    if (getExclusiveOwnerThread() != current)
                        return -1;
                    // else we hold the exclusive lock; blocking here
                    // would cause deadlock.
                } else if (readerShouldBlock()) {
                    // Make sure we're not acquiring read lock reentrantly
                    if (firstReader == current) {
                        // assert firstReaderHoldCount > 0;
                    } else {
                        if (rh == null) {
                            rh = cachedHoldCounter;
                            if (rh == null || rh.tid != getThreadId(current)) {
                                rh = readHolds.get();
                                if (rh.count == 0)
                                    readHolds.remove();
                            }
                        }
                        //如果当前读锁为0 那么失败
                        if (rh.count == 0)
                            return -1;
                    }
                }

                //以下的逻辑就是获取共享锁了

                //超过次数 不能再获取
                if (sharedCount(c) == MAX_COUNT)
                    throw new Error("Maximum lock count exceeded");
                //获取共享锁成功
                if (compareAndSetState(c, c + SHARED_UNIT)) {
                    //如果只有当前的线程获取到读锁 那么将当前线程设置为firstReader

                    //以下代码与tryAcquireShared相同

                    if (sharedCount(c) == 0) {
                        firstReader = current;
                        firstReaderHoldCount = 1;
                    } else if (firstReader == current) {
                        firstReaderHoldCount++;
                    } else {
                        if (rh == null)
                            rh = cachedHoldCounter;
                        if (rh == null || rh.tid != getThreadId(current))
                            rh = readHolds.get();
                        else if (rh.count == 0)
                            readHolds.set(rh);
                        rh.count++;
                        cachedHoldCounter = rh; // cache for release
                    }
                    return 1;
                }
            }
        }

         //获取写锁 在读模式获取写模式下都可以执行,执行效果和tryAcquire是差不多的
         //但是少了writerShouldBlock的判断
        final boolean tryWriteLock() {
            Thread current = Thread.currentThread();
            int c = getState();
            if (c != 0) {
                int w = exclusiveCount(c);
                if (w == 0 || current != getExclusiveOwnerThread())
                    return false;
                if (w == MAX_COUNT)
                    throw new Error("Maximum lock count exceeded");
            }
            if (!compareAndSetState(c, c + 1))
                return false;
            setExclusiveOwnerThread(current);
            return true;
        }

         //获取读锁 在两种模式下都能够执行，和tryAcquireShared效果差不多
         //除了少了readerShouldBlock逻辑
        final boolean tryReadLock() {
            Thread current = Thread.currentThread();
            for (;;) {
                int c = getState();
                if (exclusiveCount(c) != 0 &&
                    getExclusiveOwnerThread() != current)
                    return false;
                int r = sharedCount(c);
                if (r == MAX_COUNT)
                    throw new Error("Maximum lock count exceeded");
                if (compareAndSetState(c, c + SHARED_UNIT)) {
                    if (r == 0) {
                        firstReader = current;
                        firstReaderHoldCount = 1;
                    } else if (firstReader == current) {
                        firstReaderHoldCount++;
                    } else {
                        HoldCounter rh = cachedHoldCounter;
                        if (rh == null || rh.tid != getThreadId(current))
                            cachedHoldCounter = rh = readHolds.get();
                        else if (rh.count == 0)
                            readHolds.set(rh);
                        rh.count++;
                    }
                    return true;
                }
            }
        }

        //是否持有独占锁
        protected final boolean isHeldExclusively() {
            return getExclusiveOwnerThread() == Thread.currentThread();
        }

        final ConditionObject newCondition() {
            return new ConditionObject();
        }

        //获取当前独占锁的线程
        final Thread getOwner() {
            return ((exclusiveCount(getState()) == 0) ?
                    null :
                    getExclusiveOwnerThread());
        }

        //获取持有读锁的数量
        final int getReadLockCount() {
            return sharedCount(getState());
        }
        //判断是否在写锁的锁定下
        final boolean isWriteLocked() {
            return exclusiveCount(getState()) != 0;
        }

        //判断写锁持有的次数
        final int getWriteHoldCount() {
            return isHeldExclusively() ? exclusiveCount(getState()) : 0;
        }

        //判断写锁持有的次数
        final int getReadHoldCount() {
            if (getReadLockCount() == 0)
                return 0;


            //如前面所说 为了保存每一个线程的读锁持有的次数 所以将持有的次数保存在ThreadLocal
            Thread current = Thread.currentThread();
            if (firstReader == current)
                return firstReaderHoldCount;

            HoldCounter rh = cachedHoldCounter;
            if (rh != null && rh.tid == getThreadId(current))
                return rh.count;

            int count = readHolds.get().count;
            if (count == 0) readHolds.remove();
            return count;
        }

        //反序列化 反序列化之后是一个没有被持有的状态
        private void readObject(java.io.ObjectInputStream s)
            throws java.io.IOException, ClassNotFoundException {
            s.defaultReadObject();
            readHolds = new ThreadLocalHoldCounter();
            setState(0); // reset to unlocked state
        }

        final int getCount() { return getState(); }
}

公平锁的实现:
static final class FairSync extends Sync {
    private static final long serialVersionUID = -2274990926593161451L;
    final boolean writerShouldBlock() {
        //为了保证公平 如果CLK中已经有线程等待的话 那么先堵塞
        return hasQueuedPredecessors();
    }
    final boolean readerShouldBlock() {
          //为了保证公平 如果CLK中已经有线程等待的话 那么先堵塞
        return hasQueuedPredecessors();
    }
}
非公平锁实现:
static final class NonfairSync extends Sync {
        private static final long serialVersionUID = -8159625535654395037L;
        final boolean writerShouldBlock() {
            //写锁模式下 采用抢占模式
            return false;
        }
        final boolean readerShouldBlock() {
            //这里比较有趣 也比较需要注意的,在非公平的锁中,在获取读锁的时候为了防止写锁饥饿,所以在读锁发现CLK的head节点的第一个节点为
            //写节点  那么优先让写锁获的锁
            return apparentlyFirstQueuedIsExclusive();
        }
}
读锁实现:
被Sync的方法进行代理
public static class ReadLock implements Lock, java.io.Serializable {
        private static final long serialVersionUID = -5992448646407690164L;
        private final Sync sync;
        protected ReadLock(ReentrantReadWriteLock lock) {
            sync = lock.sync;
        }
        public void lock() {
            sync.acquireShared(1);
        }
        public void lockInterruptibly() throws InterruptedException {
            sync.acquireSharedInterruptibly(1);
        }
        public boolean tryLock() {
            return sync.tryReadLock();
        }
        public boolean tryLock(long timeout, TimeUnit unit)
                throws InterruptedException {
            return sync.tryAcquireSharedNanos(1, unit.toNanos(timeout));
        }
        public void unlock() {
            sync.releaseShared(1);
        }
        //显然 读锁是不支持Condition的
        public Condition newCondition() {
            throw new UnsupportedOperationException();
        }
        public String toString() {
            int r = sync.getReadLockCount();
            return super.toString() +
                "[Read locks = " + r + "]";
        }
}
写锁的实现:
对Sync的代理 无其他的特殊逻辑
public static class WriteLock implements Lock, java.io.Serializable {
        private static final long serialVersionUID = -4992448646407690164L;
        private final Sync sync;
        protected WriteLock(ReentrantReadWriteLock lock) {
            sync = lock.sync;
        }
        public void lock() {
            sync.acquire(1);
        }
        public void lockInterruptibly() throws InterruptedException {
            sync.acquireInterruptibly(1);
        }
        public boolean tryLock( ) {
            return sync.tryWriteLock();
        }
        public boolean tryLock(long timeout, TimeUnit unit)
                throws InterruptedException {
            return sync.tryAcquireNanos(1, unit.toNanos(timeout));
        }
        public void unlock() {
            sync.release(1);
        }
        public Condition newCondition() {
            return sync.newCondition();
        }
        public String toString() {
            Thread o = sync.getOwner();
            return super.toString() + ((o == null) ?
                                       "[Unlocked]" :
                                       "[Locked by thread " + o.getName() + "]");
}

4.方法
构造函数:
public ReentrantReadWriteLock() {
    //默认是否是公平的锁
    this(false);
}
public ReentrantReadWriteLock(boolean fair) {
        //创建Sync
        sync = fair ? new FairSync() : new NonfairSync();
        readerLock = new ReadLock(this);
        writerLock = new WriteLock(this);
}
获取读写锁:
public ReentrantReadWriteLock.WriteLock writeLock() { return writerLock; }
public ReentrantReadWriteLock.ReadLock  readLock()  { return readerLock; }
其他方法:
都是一些状态检查方法